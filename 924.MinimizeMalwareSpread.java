/*924. Minimize Malware Spread
Hard: Union Find, DFS
In a network of nodes, each node i is directly connected to another node j if and 
only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.  Whenever two nodes are 
directly connected and at least one of those two nodes is infected by malware, 
both nodes will be infected by malware.  This spread of malware will continue 
until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the 
entire network, after the spread of malware stops.

We will remove one node from the initial list.  Return the node that if removed, 
would minimize M(initial).  If multiple nodes could be removed to minimize 
M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it may 
still be infected later as a result of the malware spread.

Example 1:
Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0
解释一下，这个的意思是总共有三个node, 除了自己和自己connect之外，(0,1)也是
connect在一起的，因为(0,1)和(1,0)两个坐标都是1


Example 2:
Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0
Example 3:

Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1
*/

/*解题思路, 还是Union Find的办法
我们需要链三个array， 一个是储存所有节点的关系的path[]。 一个是计算每个独立板块
的count[]。最后一个是记录每个独立板块所有malware 个数的 infect[]。 后两个都需要
通过path[]来构造，并且使用path[]数组来查找对应的区域大小和每个区域melware的多少

*/

class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;

        int[] path = new int[n];
        int[] count = new int[n];
        for(int i=0; i< n; i++){
            path[i] =i;//假设所有的坐标代表的area都是独立的, path[i] = i一一对应
            count[i] =1;//每一个独立的area里面都有一个malware
        } 

        for(int i=0; i< n;i++){
            for(int j=i+1; j< n; j++){
                if(graph[i][j] == 1){
                    int v1 = helper(path, i);
                    int v2 = helper(path, j);
                    if(v1 != v2){
                        path[v1] = v2; //相当于合并两个area,因为i connect to j
                        count[v2] += count[v1]; //注意这里是反过来，最后累加到root上面。这里计算的是每个area的面积
                    } 
                } 
            }
        }

        int[] infect = new int[n];
        for(int ini: initial) infect[helper(path, ini)]++;//确定每个area中有几个malware

        Arrays.sort(initial);
        int max= 0, res = initial[0];
        for(int i: initial){
            /*一个区域如果有两个node都被感染了那么去掉任意一个其实都没有意义。
            那么我们只找那种去掉一个就可以拯救整个感染区的node*/
            if(infect[helper(path, i)] ==1){
                int total = count[helper(path, i)];
                if(max <total){
                    max = total;
                    res = i;
                }
            }
        }
        //如果每个感染区的数量都大于1，那么我们就返回node number最小的那个，这也是为什么一开始要sort的原因 
        return res;
    }

    public int helper(int[] path, int index){
        while(path[index] !=index){
            path[index] = path[path[index]];//路径压缩，可以节省很多的查找时间
            index = path[index];
        }
        return index;
    }
}